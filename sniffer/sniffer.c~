/*************************************************************************
    > File Name: sniffer.c
    > Author: wangdong 161320118
    > Created Time: 2016年06月09日 星期四 13时13分35秒
 ************************************************************************/

#include <stdio.h>
#include <pcap.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/ip.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <netinet/ip_icmp.h>
#include <netinet/udp.h>
#include <ctype.h>

//偏移量：从数据帧开始偏移一定距离才能到达网络层数据包头部
int offset = -1;
pcap_t * pd;

//根据数据链路层类型获取对应的偏移量
void get_offset(){
	//获取数据链路层类型
	int link_type;	
	if((link_type = pcap_datalink(pd)) < 0){
		printf("pcap_datalink() %s\n",pcap_geterr(pd));
		return;
	}
	//获取对应的偏移量
	switch(link_type){
		//BSD Loopback
		case DLT_NULL:
			offset = 4;
			break;
		//Ethernet 10/100/1000 Mbs
		case DLT_EN10MB:
			offset = 14;
			break;
		case DLT_SLIP:
		case DLT_PPP:
			offset = 24;
			break;
		//Wi-Fi 802.11
		case DLT_IEEE802_11:
			offset = 22;
			break;
		default:
			printf("Unsupported datalink (%d)\n",link_type);
			break;
	}
}

//解析数据包 参数1：标志数据包 参数2：数据包信息 参数3：整个数据包
void parse_packet(u_char *user,struct pcap_pkthdr *packetthdr,u_char *packetptr){
	struct ip *iphdr;
	struct icmphdr *icmphdr;
	struct tcphdr *tcphdr;
	struct udphdr *udphdr;
	char src_ip[256],des_ip[256];
	unsigned short id, seq;

	//剥离数据链路层头部，解析网络层头部
	packetptr +=  offset;
	iphdr = (struct ip*)packetptr;//强制类型转换，按照ip结构类型解析数据
	strcpy(src_ip,inet_ntoa(iphdr->ip_src));
	strcpy(des_ip,inet_ntoa(iphdr->ip_dst));
	//剥离网络层头部，解析传输层协议
	packetptr += 4*iphdr->ip_hl;
	switch(iphdr->ip_p){
		//TCP协议
		case IPPROTO_TCP:
			tcphdr = (struct tcphdr*)packetptr;
			printf("协议:TCP\t源:%s:%d -> 目的:%s:%d\t序号:0x%x\t确认号:0x%x\n窗口值大小:0x%x\tTCP首部长度:%d\turg位:%c\tack位:%c\tpsh位:%c\trst位:%c\tsyn位:%c\tfin位:%c\n",
				src_ip,ntohs(tcphdr->source),
				des_ip,ntohs(tcphdr->dest),
				ntohl(tcphdr->seq), ntohl(tcphdr->ack_seq),
				ntohs(tcphdr->window), 4*tcphdr->doff,
               			(tcphdr->urg ? 'U' : '*'),
               			(tcphdr->ack ? 'A' : '*'),
               			(tcphdr->psh ? 'P' : '*'),
               			(tcphdr->rst ? 'R' : '*'),
               			(tcphdr->syn ? 'S' : '*'),
               			(tcphdr->fin ? 'F' : '*'));
			packetptr += 4*tcphdr->doff;
			break;
		//UDP协议
		case IPPROTO_UDP:
			udphdr = (struct udphdr*)packetptr;
			printf("协议:UDP\t源:%s:%d -> 目的:%s:%d\n", src_ip, ntohs(udphdr->source),des_ip, ntohs(udphdr->dest));
			packetptr += 8;
			break;
		//ICMP协议
		case IPPROTO_ICMP:
			icmphdr = (struct icmphdr*)packetptr;
			memcpy(&id, (u_char*)icmphdr+4, 2);
        		memcpy(&seq, (u_char*)icmphdr+6, 2);
        		printf("协议:ICMP\t源:%s -> 目的:%s\t类型:%d\t代码:%d\t标识:%d\t序号:%d\n", src_ip, des_ip, icmphdr->type, icmphdr->code, ntohs(id), ntohs(seq));
			packetptr += 8;
			break;
	}
	//剥离传输层首部，解析应用层协议
	printf("应用层信息:\n%s\n",packetptr);
	/*
	int i=0;
	while(!packetptr[i]){
		if(isprint(packetptr[i]))	printf("%c",packetptr[i]);
		++i;
	}*/
    	printf("************************************************************************************\n\n");
}

#define MAX 255

char *cmd[MAX][MAX];
int cmd_total;

void get_sub_cmd(int loc,char *command){
	char *p;
	char sub[] = " ";
	int i = 0;
	p = strtok(command,sub);
	if(p!=NULL){
		cmd[loc][0] = p;
		++i;
	}
	while((p=strtok(NULL,sub))){
		cmd[loc][i] = p;
		++i;
	}
	cmd[loc][i] = NULL;
}
void get_cmd(char *command){
	char *p;
	char sub[] = "|";
	cmd_total = 0;
	p = strtok(command,sub);
	if(p!=NULL){
		cmd[0][0]=p;
		++cmd_total;
	}
	while((p=strtok(NULL,sub))){
		cmd[cmd_total][0]=p;
		++cmd_total;
	}
	int i;
	cmd[cmd_total][0]=NULL;
	for(i=0;i<cmd_total;++i){
		get_sub_cmd(i,cmd[i][0]);
	}
}

int main(int argc,char *argv[]){
	//错误信息
	char err_buf[PCAP_ERRBUF_SIZE],device_name[256];
	//过滤字符串
	char bpfstr[256]="";
	//设置：一直抓取数据包，直到遇到错误
	int packet_num = -1;
	//解析命令
	int c;
    	while ((c = getopt (argc, argv, "hd:p:n:")) != -1){
        	switch (c){
        		case 'h':
            		printf("usage: %s [-d] [device_name] [-p] [port_number] [-n] [packet_count]　[-h]\n", argv[0]);
            		exit(0);
        		case 'd':
            			strcpy(device_name, optarg);
            			break;
        		case 'p':
				sprintf(bpfstr,"src port %s",optarg);
            			break;
			case 'n':
				packet_num = atoi(optarg);
				break;
        	}
    	}
	//打开网络设备
	if((pd = pcap_open_live(device_name,BUFSIZ,1,0,err_buf)) == NULL){
		printf("error: pcap_open_live %s\n",err_buf);
		return 0;
	}
	//获取网络设备信息：ip地址，子网掩码
	//uint32_t local_ip,local_netmask;
	bpf_u_int32 local_ip,local_netmask;
	if(pcap_lookupnet(device_name,&local_ip,&local_netmask,err_buf) < 0){
		printf("error: pcap_lookupnet %s\n",err_buf);
		return 0;
	}
	//编译过滤规则
	struct bpf_program bpf;
	if(pcap_compile(pd,&bpf,bpfstr,0,local_netmask)){
		printf("pcap_complie():	%s\n",pcap_geterr(pd));
		return 0;
	}
	//应用过滤规则
	if(pcap_setfilter(pd,&bpf) < 0){
		printf("pcap_compile(): %s\n",pcap_geterr(pd));
		return 0;
	}
	//根据数据链路层类型，获取偏移量
	get_offset();
	if(offset == -1){
		return 0;
	}
	//数据包抓取并解析
	if(pcap_loop(pd,packet_num,(pcap_handler)parse_packet,0) < 0){
		printf("pcap_loop failed: %s\n",pcap_geterr(pd));
	}
	return 0;
}
